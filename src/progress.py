from __future__ import annotations

import asyncio
import logging
from typing import Optional, Callable, Any
from datetime import datetime

from telegram import Update
from telegram.ext import ContextTypes

logger = logging.getLogger(__name__)


class ProgressTracker:
    """
    –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram.
    """
    
    def __init__(self, update: Update, ctx: ContextTypes.DEFAULT_TYPE, 
                 total_items: int, operation_name: str = "–û–±—Ä–∞–±–æ—Ç–∫–∞"):
        self.update = update
        self.ctx = ctx
        self.total_items = total_items
        self.operation_name = operation_name
        self.processed_items = 0
        self.start_time = datetime.now()
        self.last_update_time = datetime.now()
        self.message_id: Optional[int] = None
        self.update_interval = 5  # —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
        
    async def start(self) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ"""
        text = f"üîÑ {self.operation_name}: 0/{self.total_items} (0%)"
        message = await self.update.message.reply_text(text)
        self.message_id = message.message_id
        
    async def update_progress(self, processed: int, status_text: str = "") -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å"""
        self.processed_items = processed
        current_time = datetime.now()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ N —Å–µ–∫—É–Ω–¥
        if (current_time - self.last_update_time).total_seconds() < self.update_interval:
            return
            
        self.last_update_time = current_time
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        progress_percent = (processed / self.total_items * 100) if self.total_items > 0 else 0
        elapsed = current_time - self.start_time
        
        # ETA —Ä–∞—Å—á–µ—Ç
        if processed > 0:
            avg_time_per_item = elapsed.total_seconds() / processed
            remaining_items = self.total_items - processed
            eta_seconds = remaining_items * avg_time_per_item
            eta_text = self._format_time(eta_seconds)
        else:
            eta_text = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        bar_length = 20
        filled_length = int(bar_length * progress_percent / 100)
        bar = "‚ñà" * filled_length + "‚ñë" * (bar_length - filled_length)
        
        text_lines = [
            f"üîÑ {self.operation_name}",
            f"üìä {processed}/{self.total_items} ({progress_percent:.1f}%)",
            f"‚è±Ô∏è –ü—Ä–æ—à–ª–æ: {self._format_time(elapsed.total_seconds())}",
            f"üïê –û—Å—Ç–∞–ª–æ—Å—å: ~{eta_text}",
            f"[{bar}]"
        ]
        
        if status_text:
            text_lines.append(f"üí¨ {status_text}")
        
        text = "\n".join(text_lines)
        
        try:
            await self.ctx.bot.edit_message_text(
                chat_id=self.update.effective_chat.id,
                message_id=self.message_id,
                text=text
            )
        except Exception as e:
            logger.warning(f"Failed to update progress message: {e}")
    
    async def complete(self, final_message: str = "") -> None:
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        elapsed = datetime.now() - self.start_time
        
        if not final_message:
            final_message = f"‚úÖ {self.operation_name} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
        
        text_lines = [
            final_message,
            f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.total_items} —ç–ª–µ–º–µ–Ω—Ç–æ–≤",
            f"‚è±Ô∏è –í—Ä–µ–º—è: {self._format_time(elapsed.total_seconds())}"
        ]
        
        text = "\n".join(text_lines)
        
        try:
            await self.ctx.bot.edit_message_text(
                chat_id=self.update.effective_chat.id,
                message_id=self.message_id,
                text=text
            )
        except Exception as e:
            logger.warning(f"Failed to update final progress message: {e}")
    
    async def error(self, error_message: str) -> None:
        """–°–æ–æ–±—â–∞–µ—Ç –æ–± –æ—à–∏–±–∫–µ"""
        text = f"‚ùå {self.operation_name} –ø—Ä–µ—Ä–≤–∞–Ω–∞!\nüí¨ {error_message}"
        
        try:
            await self.ctx.bot.edit_message_text(
                chat_id=self.update.effective_chat.id,
                message_id=self.message_id,
                text=text
            )
        except Exception as e:
            logger.warning(f"Failed to update error message: {e}")
    
    def _format_time(self, seconds: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        if seconds < 60:
            return f"{seconds:.0f}—Å"
        elif seconds < 3600:
            minutes = seconds / 60
            return f"{minutes:.1f}–º"
        else:
            hours = seconds / 3600
            return f"{hours:.1f}—á"


class BatchProcessor:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–æ–ª—å—à–∏—Ö –º–∞—Å—Å–∏–≤–æ–≤ –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∏ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º —Å–∫–æ—Ä–æ—Å—Ç–∏.
    """
    
    def __init__(self, batch_size: int = 20, rate_limit: float = 0.4):
        self.batch_size = batch_size
        self.rate_limit = rate_limit
        
    async def process_with_progress(self,
                                  items: list,
                                  process_func: Callable[[Any], Any],
                                  progress_tracker: ProgressTracker,
                                  **kwargs) -> list:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –±–∞—Ç—á–∞–º–∏ —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.
        
        Args:
            items: –°–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            process_func: –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            progress_tracker: –¢—Ä–µ–∫–µ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è process_func
        """
        results = []
        processed_count = 0
        
        await progress_tracker.start()
        
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á–∞–º–∏
            for i in range(0, len(items), self.batch_size):
                batch = items[i:i + self.batch_size]
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á
                if asyncio.iscoroutinefunction(process_func):
                    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
                    batch_results = await asyncio.gather(
                        *[process_func(item, **kwargs) for item in batch],
                        return_exceptions=True
                    )
                else:
                    # –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
                    batch_results = []
                    for item in batch:
                        try:
                            result = process_func(item, **kwargs)
                            batch_results.append(result)
                        except Exception as e:
                            batch_results.append(e)
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                for result in batch_results:
                    if not isinstance(result, Exception):
                        results.append(result)
                    else:
                        logger.warning(f"Batch processing error: {result}")
                
                processed_count += len(batch)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                await progress_tracker.update_progress(
                    processed_count,
                    f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –±–∞—Ç—á–µ–π: {(i // self.batch_size) + 1}"
                )
                
                # Rate limiting
                if self.rate_limit > 0:
                    await asyncio.sleep(self.rate_limit)
            
            await progress_tracker.complete(
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(results)} –∏–∑ {len(items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤"
            )
            
        except Exception as e:
            await progress_tracker.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
            raise
        
        return results


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
def with_progress(operation_name: str):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–∏"""
    def decorator(func):
        async def wrapper(update: Update, ctx: ContextTypes.DEFAULT_TYPE, 
                         items: list, *args, **kwargs):
            progress = ProgressTracker(update, ctx, len(items), operation_name)
            return await func(update, ctx, items, progress, *args, **kwargs)
        return wrapper
    return decorator
