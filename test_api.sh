#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API endpoints

echo "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ML Data Pipeline API"
echo "======================================"
echo ""

API_URL="http://localhost:8000"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è endpoint
test_endpoint() {
    local name=$1
    local method=$2
    local endpoint=$3
    local data=$4
    
    echo -e "${YELLOW}–¢–µ—Å—Ç: $name${NC}"
    
    if [ "$method" = "GET" ]; then
        response=$(curl -s -w "\n%{http_code}" "$API_URL$endpoint")
    else
        response=$(curl -s -w "\n%{http_code}" -X $method "$API_URL$endpoint" \
            -H "Content-Type: application/json" \
            -d "$data")
    fi
    
    http_code=$(echo "$response" | tail -n1)
    body=$(echo "$response" | head -n-1)
    
    if [ "$http_code" -eq 200 ]; then
        echo -e "${GREEN}‚úÖ OK${NC} (HTTP $http_code)"
        echo "$body" | jq '.' 2>/dev/null || echo "$body"
    else
        echo -e "${RED}‚ùå FAIL${NC} (HTTP $http_code)"
        echo "$body"
    fi
    
    echo ""
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω
echo "1Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è..."
if ! curl -s "$API_URL" > /dev/null 2>&1; then
    echo -e "${RED}‚ùå API –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ $API_URL${NC}"
    echo "üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: docker-compose up -d"
    echo "   –∏–ª–∏: python -m uvicorn src.api:app"
    exit 1
fi
echo -e "${GREEN}‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω${NC}"
echo ""

# –¢–µ—Å—Ç—ã
test_endpoint "–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞" "GET" "/"

test_endpoint "Health Check" "GET" "/health"

test_endpoint "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤" "POST" "/classify" \
    '{"texts": ["–ø–µ—Ä–µ–¥–∞—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞", "–æ–ø–ª–∞—Ç–∏—Ç—å –ø–∏—Ç–∞–Ω–∏–µ"]}'

test_endpoint "–°–ø–∏—Å–æ–∫ –≤–µ—Ä—Å–∏–π" "GET" "/versions"

test_endpoint "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤" "GET" "/stats"

# –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª)
if [ -f "test_logs.csv" ]; then
    echo -e "${YELLOW}–¢–µ—Å—Ç: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞${NC}"
    upload_response=$(curl -s -w "\n%{http_code}" -X POST "$API_URL/upload" \
        -F "file=@test_logs.csv")
    
    upload_code=$(echo "$upload_response" | tail -n1)
    upload_body=$(echo "$upload_response" | head -n-1)
    
    if [ "$upload_code" -eq 200 ]; then
        echo -e "${GREEN}‚úÖ OK${NC} (HTTP $upload_code)"
        echo "$upload_body" | jq '.'
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        file_path=$(echo "$upload_body" | jq -r '.path')
        
        echo ""
        echo -e "${YELLOW}–¢–µ—Å—Ç: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞${NC}"
        
        process_response=$(curl -s -w "\n%{http_code}" -X POST "$API_URL/process" \
            -H "Content-Type: application/json" \
            -d "{\"file_path\": \"$file_path\", \"balance_domains\": true, \"augment\": false, \"create_version\": true}")
        
        process_code=$(echo "$process_response" | tail -n1)
        process_body=$(echo "$process_response" | head -n-1)
        
        if [ "$process_code" -eq 200 ]; then
            echo -e "${GREEN}‚úÖ OK${NC} (HTTP $process_code)"
            echo "$process_body" | jq '.'
        else
            echo -e "${RED}‚ùå FAIL${NC} (HTTP $process_code)"
            echo "$process_body"
        fi
    else
        echo -e "${RED}‚ùå FAIL${NC} (HTTP $upload_code)"
        echo "$upload_body"
    fi
    
    echo ""
fi

# –ò—Ç–æ–≥–æ–≤–æ–µ —Ä–µ–∑—é–º–µ
echo "======================================"
echo -e "${GREEN}üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ${NC}"
echo "======================================"
echo ""
echo "–î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ API:"
echo "   http://localhost:8000/docs"
echo ""

