#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è ESK Agent LLM Pro
–ó–∞–ø—É—Å–∫–∞—Ç—å –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–¥–∞—á–µ–π —Å–∏—Å—Ç–µ–º—ã –∫–æ–ª–ª–µ–≥–∞–º
"""

import os
import sys
from pathlib import Path

def check_environment():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    issues = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª
    if not Path(".env").exists():
        issues.append("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω (—Å–∫–æ–ø–∏—Ä—É–π—Ç–µ config.example)")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    required_vars = ["TELEGRAM_BOT_TOKEN", "LLM_API_KEY"]
    for var in required_vars:
        if not os.getenv(var):
            issues.append(f"‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è {var} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    data_dir = Path("data")
    if not data_dir.exists():
        data_dir.mkdir(parents=True)
        print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è data/")
    
    if not issues:
        print("‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        for issue in issues:
            print(issue)
        return False
    
    return True

def check_imports():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª–µ–π...")
    
    try:
        from src.adaptive_learning import FeedbackLearner, PromptOptimizer
        from src.cache import LLMCache, init_cache
        from src.context import ContextManager
        from src.progress import ProgressTracker, BatchProcessor
        from src.bot import settings, store
        print("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è —É—Å–ø–µ—à–Ω–æ")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

def check_llm_connection():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ LLM"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ LLM –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
    
    try:
        from src.llm import LLMClient
        from src.config import Settings
        
        settings = Settings.load()
        client = LLMClient(
            api_key=settings.llm_api_key,
            api_base=settings.llm_api_base,
            model=settings.llm_model
        )
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        response = client.chat([
            {"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."}
        ], response_json=False, temperature=0.1)
        
        if response:
            print("‚úÖ LLM –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        else:
            print("‚ùå LLM –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ LLM –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

def check_telegram_bot():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç Telegram –±–æ—Ç–∞"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram –±–æ—Ç–∞...")
    
    try:
        from telegram import Bot
        from src.config import Settings
        
        settings = Settings.load()
        bot = Bot(token=settings.bot_token)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        bot_info = bot.get_me()
        print(f"‚úÖ Telegram –±–æ—Ç: @{bot_info.username}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Telegram –±–æ—Ç–∞: {e}")
        return False

def check_file_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–∞–π–ª–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã...")
    
    required_files = [
        "src/bot.py",
        "src/adaptive_learning.py", 
        "src/cache.py",
        "src/context.py",
        "src/progress.py",
        "prompts/labeler_system.txt",
        "prompts/labeler_fewshot.txt",
        "requirements.txt"
    ]
    
    missing_files = []
    for file_path in required_files:
        if not Path(file_path).exists():
            missing_files.append(file_path)
    
    if not missing_files:
        print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–µ")
        return True
    else:
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã:")
        for file_path in missing_files:
            print(f"   - {file_path}")
        return False

def show_system_info():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ"""
    print("\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:")
    
    try:
        from src.config import Settings
        settings = Settings.load()
        
        print(f"‚Ä¢ –ú–æ–¥–µ–ª—å LLM: {settings.llm_model}")
        print(f"‚Ä¢ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {settings.batch_size}")
        print(f"‚Ä¢ –ü–æ—Ä–æ–≥ –Ω–∏–∑–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {settings.low_conf}")
        print(f"‚Ä¢ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö: {settings.data_dir}")
        print(f"‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {settings.log_level}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–æ–≤
        data_dir = Path(settings.data_dir)
        if data_dir.exists():
            files = list(data_dir.rglob("*"))
            print(f"‚Ä¢ –§–∞–π–ª–æ–≤ –≤ data/: {len([f for f in files if f.is_file()])}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üîß ESK Agent LLM Pro - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
    print("=" * 50)
    
    checks = [
        check_file_structure,
        check_environment, 
        check_imports,
        check_llm_connection,
        check_telegram_bot
    ]
    
    passed = 0
    for check in checks:
        if check():
            passed += 1
    
    show_system_info()
    
    print("\n" + "=" * 50)
    print(f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{len(checks)} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == len(checks):
        print("üéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        print("\nüöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞: python -m src.bot")
        return True
    else:
        print("‚ö†Ô∏è  –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
